# 构建Nginx
name: Build Nginx

on:
  workflow_run:
    workflows: ["Build Nginx Expand"]
    types: [completed]
  workflow_dispatch:
    inputs:
      nginx_version:
        description: "Specify the nginx version"
        required: true
        default: "1.28.0"
      prefix:
        description: "Specify the installation prefix"
        required: true
        default: "/usr/local/nginx"

jobs:
  build-nginx:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      NGINX_SRC_DIR: "/opt/nginx"
      NGINX_VERSION: ${{ github.event.inputs.nginx_version }}
      PREFIX: ${{ github.event.inputs.prefix }}
    steps:
      # 恢复扩展缓存包
      - name: Restore expand cache
        uses: actions/cache@v4
        with:
          path: ./cached-nginx-expand.tar
          key: ${{ runner.os }}-nginx-expand
          restore-keys: |
            ${{ runner.os }}-nginx-expand
          retention-days: 10

      # 检查已编译版本缓存
      - name: Check for versioned nginx package
        id: nginx-cache
        uses: actions/cache@v4
        with:
          path: ./nginx-${{ env.NGINX_VERSION }}.tar.gz
          key: ${{ runner.os }}-nginx-${{ env.NGINX_VERSION }}
          retention-days: 10

      # 只有当缓存未命中才需要构建
      - name: Prepare build environment
        if: steps.nginx-cache.outputs.cache-hit != 'true'
        run: |
          # 安装 docker
          sudo apt-get -qq update
          sudo apt-get -qq -y install docker-ce
          # 解包扩展内容
          tar -xf cached-nginx-expand.tar -C .
          # 加载 builder 镜像
          sudo docker load -i cached-nginx-builder.tar
          # 启动构建容器
          sudo docker run -d --name build-nginx-container -v "${{ github.workspace }}:${{ env.NGINX_SRC_DIR }}" almalinux:9-nginx-dev tail -f /dev/null

      # 下载并解压 Nginx 源码
      - name: Download and extract Nginx source
        if: steps.nginx-cache.outputs.cache-hit != 'true'
        run: |
          sudo docker exec build-nginx-container bash -c "
            cd ${{ env.NGINX_SRC_DIR }} && rm -rf nginx-${{ env.NGINX_VERSION }}.tar.gz &&
            curl -L -o nginx-${{ env.NGINX_VERSION }}.tar.gz https://nginx.org/download/nginx-${{ env.NGINX_VERSION }}.tar.gz &&
            tar -zxvf nginx-${{ env.NGINX_VERSION }}.tar.gz && rm -rf nginx-${{ env.NGINX_VERSION }}.tar.gz
          "

      # 配置 Nginx 编译参数
      - name: Configure Nginx
        run: |
          sudo docker exec build-nginx-container bash -c "
            if [ -f ~/.bashrc ]; then source ~/.bashrc; fi
            ldconfig && cd ${{ env.NGINX_SRC_DIR }}/nginx-${{ env.NGINX_VERSION }} &&
            ./configure --prefix=${{ env.PREFIX }} \
                --with-compat \
                --with-threads \
                --with-file-aio \
                --with-http_v2_module \
                --with-http_v3_module \
                --with-http_ssl_module \
                --with-http_sub_module \
                --with-http_slice_module \
                --with-http_realip_module \
                --with-http_degradation_module \
                --with-http_stub_status_module \
                --with-pcre-jit \
                --with-pcre=../pcre2 \
                --with-stream \
                --with-stream_ssl_module \
                --with-stream_realip_module \
                --with-stream_ssl_preread_module \
                --with-openssl=../openssl \
                --add-module=../ngx_zstd \
                --add-module=../ngx_brotli \
                --add-dynamic-module=../ngx_http_geoip2_module \
                --with-ld-opt=\"-ljemalloc -lcrypt -Wl,-z,relro,-z,now -flto -fuse-ld=gold\" \
                --with-openssl-opt='enable-ec_nistp_64_gcc_128 enable-asm enable-avx2 enable-kyber enable-ktls no-legacy no-weak-ssl-ciphers' \
                --with-cc-opt='-O3 -march=native -funroll-loops -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fomit-frame-pointer -finline-functions -fno-strict-aliasing -ffunction-sections -fdata-sections -Wl,--gc-sections -pipe -flto -fuse-ld=gold'
          "

      # 编译 Nginx
      - name: Build Nginx
        run: |
          sudo docker exec build-nginx-container bash -c "
            if [ -f ~/.bashrc ]; then source ~/.bashrc; fi
            ldconfig && cd ${{ env.NGINX_SRC_DIR }}/nginx-${{ env.NGINX_VERSION }} &&
            make -j\$(nproc) &&
            objs/nginx -V &> ${{ env.NGINX_SRC_DIR }}/nginx_build_info.txt &&
            mv objs/nginx ${{ env.NGINX_SRC_DIR }}/ &&
            mv objs/ngx_http_geoip2_module.so ${{ env.NGINX_SRC_DIR }}/
          "

      # 打包工件
      - name: Upload Nginx binary and build information to repository
        uses: actions/upload-artifact@v4
        with:
          name: nginx-linux64-${{ env.NGINX_VERSION }}
          path: |
            ${{ github.workspace }}/nginx
            ${{ github.workspace }}/nginx_build_info.txt
            ${{ github.workspace }}/GeoCN.mmdb
            ${{ github.workspace }}/GeoLite2-ASN.mmdb
            ${{ github.workspace }}/GeoLite2-City.mmdb
            ${{ github.workspace }}/GeoLite2-Country.mmdb
            ${{ github.workspace }}/ngx_http_geoip2_module.so
          retention-days: 2
          compression-level: 9
          if-no-files-found: error

      # 清理构建容器
      - name: Remove build container
        if: always()
        run: |
          sudo docker rm -f build-nginx-container || true
