name: Build Nginx Core

on:
  workflow_run:
    workflows: 
      - "Build Docker Environment Image"
      - "Build Nginx Expand"
    branches: [main]
    types: [completed]

jobs:
  build-nginx:
    # 仅当两个依赖工作流都成功时执行
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.name == 'Build Docker Environment Image'
    runs-on: ubuntu-latest
    env:
      NGINX_SRC_DIR: "/opt/nginx"
      # 从父工作流获取参数
      PREFIX: ${{ github.event.workflow_run.inputs.prefix || '/usr/local/nginx' }}
      NGINX_VERSION: ${{ github.event.workflow_run.inputs.nginx_version || '1.28.0' }}
      OPENSSL_VERSION: ${{ github.event.workflow_run.inputs.openssl_version || 'openssl-3.5.0' }}
    
    steps:
      # 1. 设置环境并恢复缓存
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Restore expand cache
        uses: actions/cache@v4
        with:
          path: ./cached-nginx-expand.tar
          key: ${{ runner.os }}-nginx-expand-${{ hashFiles('build-nginx-expand.yml') }}
          restore-keys: |
            ${{ runner.os }}-nginx-expand-
          retention-days: 10

      - name: Restore builder image
        uses: actions/cache@v4
        with:
          path: ./cached-nginx-builder.tar
          key: ${{ runner.os }}-nginx-builder-${{ hashFiles('build-docker-environment-image.yml') }}
          restore-keys: |
            ${{ runner.os }}-nginx-builder-
          retention-days: 10

      # 2. 准备构建环境
      - name: Load builder image
        run: sudo docker load -i ./cached-nginx-builder.tar

      - name: Start build container
        run: |
          sudo docker run -d --name build-nginx-container \
            -v "${{ github.workspace }}:${{ env.NGINX_SRC_DIR }}" \
            almalinux:9-nginx-dev tail -f /dev/null

      - name: Extract expand components
        run: |
          sudo docker exec build-nginx-container bash -c \
            "tar -xvf ${{ env.NGINX_SRC_DIR }}/cached-nginx-expand.tar -C ${{ env.NGINX_SRC_DIR }}"

      # 3. 下载并编译Nginx
      - name: Download and extract Nginx source
        run: |
          sudo docker exec build-nginx-container bash -c "
            cd ${{ env.NGINX_SRC_DIR }} && rm -rf nginx-${{ env.NGINX_VERSION }}.tar.gz &&
            curl -L -o 'nginx-${{ env.NGINX_VERSION }}.tar.gz' 'https://nginx.org/download/nginx-${{ env.NGINX_VERSION }}.tar.gz' &&
            tar -zxvf nginx-${{ env.NGINX_VERSION }}.tar.gz && rm -rf nginx-${{ env.NGINX_VERSION }}.tar.gz
          "

      - name: Configure Nginx
        run: |
          sudo docker exec build-nginx-container bash -c "
            if [ -f ~/.bashrc ]; then source ~/.bashrc; fi
            ldconfig && cd ${{ env.NGINX_SRC_DIR }}/nginx-${{ env.NGINX_VERSION }} &&
            ./configure --prefix=${{ env.PREFIX }} \
                --with-compat \
                --with-threads \
                --with-file-aio \
                --with-http_v2_module \
                --with-http_v3_module \
                --with-http_ssl_module \
                --with-http_sub_module \
                --with-http_slice_module \
                --with-http_realip_module \
                --with-http_degradation_module \
                --with-http_stub_status_module \
                --with-pcre-jit \
                --with-pcre=../pcre2 \
                --with-stream \
                --with-stream_ssl_module \
                --with-stream_realip_module \
                --with-stream_ssl_preread_module \
                --with-openssl=../openssl \
                --add-module=../ngx_zstd \
                --add-module=../ngx_brotli \
                --add-dynamic-module=../ngx_http_geoip2_module \
                --with-ld-opt=\"-ljemalloc -lcrypt -Wl,-z,relro,-z,now -flto -fuse-ld=gold\" \
                --with-openssl-opt='enable-ec_nistp_64_gcc_128 enable-asm enable-avx2 enable-kyber enable-ktls no-legacy no-weak-ssl-ciphers' \
                --with-cc-opt='-O3 -march=native -funroll-loops -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fomit-frame-pointer -finline-functions -fno-strict-aliasing -ffunction-sections -fdata-sections -Wl,--gc-sections -pipe -flto -fuse-ld=gold'
          "

      - name: Build Nginx
        run: |
          sudo docker exec build-nginx-container bash -c "
            if [ -f ~/.bashrc ]; then source ~/.bashrc; fi
            ldconfig && cd ${{ env.NGINX_SRC_DIR }}/nginx-${{ env.NGINX_VERSION }} &&
            make -j$(nproc) &&
            objs/nginx -V &> ${{ env.NGINX_SRC_DIR }}/nginx_build_info.txt &&
            mv objs/nginx ${{ env.NGINX_SRC_DIR }}/ &&
            mv objs/ngx_http_geoip2_module.so ${{ env.NGINX_SRC_DIR }}/
          "

      # 4. 收集并上传构建结果
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-linux64-${{ env.NGINX_VERSION }}
          path: |
            ${{ github.workspace }}/nginx
            ${{ github.workspace }}/nginx_build_info.txt
            ${{ github.workspace }}/GeoCN.mmdb
            ${{ github.workspace }}/GeoLite2-ASN.mmdb
            ${{ github.workspace }}/GeoLite2-City.mmdb
            ${{ github.workspace }}/GeoLite2-Country.mmdb
            ${{ github.workspace }}/ngx_http_geoip2_module.so
          retention-days: 2
          compression-level: 9
          if-no-files-found: error

      # 5. 清理资源
      - name: Cleanup containers
        if: always()
        run: |
          sudo docker rm -f build-nginx-container || true
          
      # 6. 通知构建结果
      - name: Notify build status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = job.status === 'success' ? 'success' : 'failure';
            const message = `Nginx ${{ env.NGINX_VERSION }} build ${conclusion}!`;
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ github.event.workflow_run.head_commit.id }}',
              body: message
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
